generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model access_log {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model customer {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model inventory {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  item_name       String       @db.VarChar(255)
  quantity        Int
  location        String       @db.VarChar(255)
  storage_unit_id String       @db.Uuid
  last_updated    DateTime?    @db.Timestamp(6)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  storage_unit    storage_unit @relation(fields: [storage_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model maintenance {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  maintenance_date DateTime     @db.Timestamp(6)
  maintenance_type String       @db.VarChar(255)
  description      String?      @db.VarChar(255)
  cost             Int
  storage_unit_id  String       @db.Uuid
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  storage_unit     storage_unit @relation(fields: [storage_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?        @db.VarChar(255)
  address      String?        @db.VarChar(255)
  city         String?        @db.VarChar(255)
  state        String?        @db.VarChar(255)
  name         String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  user_id      String         @db.Uuid
  tenant_id    String         @db.VarChar(255)
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  storage_unit storage_unit[]
}

model payment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model rental {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date      DateTime     @db.Timestamp(6)
  end_date        DateTime     @db.Timestamp(6)
  total_cost      Int
  user_id         String       @db.Uuid
  storage_unit_id String       @db.Uuid
  payment_status  Boolean
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  storage_unit    storage_unit @relation(fields: [storage_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model security {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model storage_location {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model storage_unit {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  unit_number           Int
  size                  String        @db.VarChar(255)
  availability_status   Boolean
  rent_price            Int
  business_id           String        @db.Uuid
  last_maintenance_date DateTime?     @db.Timestamp(6)
  created_at            DateTime      @default(now()) @db.Timestamp(6)
  updated_at            DateTime      @default(now()) @db.Timestamp(6)
  inventory             inventory[]
  maintenance           maintenance[]
  rental                rental[]
  organization          organization  @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
  rental       rental[]
}
